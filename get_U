#!/global/home/users/luorp/.conda/envs/abacus_env/bin/python
import numpy as np


scf_dir = "scf_interacting"
nscf_dir = "nscf_bare" 
alpha_list = ["0", "-0.02", "-0.05", "-0.08", "+0.02", "+0.05", "+0.08"]
nsite = 1
n_pre = nsite*24

def get_U_array(nsite, alpha_list, path):
    occ_scf = []
    for isite in range(nsite):
        occ_isite = []
        for alpha in alpha_list:
            with open(path+"/alph%s/OUTCAR"%alpha, "r") as f:
                iread = 0
                for line in f:
                    words = line.split()
                    if " total charge " in line:
                        iread = 1
                    if len(words) and words[0] == "tot": 
                        break
                    if iread == 1 and len(words) == 5:
                        if int(words[0]) == n_pre + isite + 1:
                            occ_isite.append(float(words[3]))
        occ_scf.append(occ_isite)
    return np.array(occ_scf)

def linreg(X, Y):
    """
    Summary
        Linear regression of y = ax + b
    Usage
        real, real, real = linreg(list, list)
    Returns coefficients to the regression line "y=ax+b" from x[] and y[], and R^2 Value
    """

    N = len(X)
    Sx = Sy = Sxx = Syy = Sxy = 0.0
    for i, x in enumerate(X):
        y = Y[i]
        Sx = Sx + x
        Sy = Sy + y
        Sxx = Sxx + x*x
        Syy = Syy + y*y
        Sxy = Sxy + x*y
    det = Sxx * N - Sx * Sx
    a, b = (Sxy * N - Sy * Sx)/det, (Sxx * Sy - Sx * Sxy)/det
    meanerror = residual = 0.0
    for i, x in enumerate(X):
        y = Y[i]
        meanerror = meanerror + (y - Sy/N)**2
        residual = residual + (y - a * x - b)**2
    RR = 1 - residual/meanerror
    ss = residual / (N-2)
    Var_a, Var_b = ss * N / det, ss * Sxx / det
    return a, b, RR

path = "scf_interacting"
occ_scf = get_U_array(nsite, alpha_list, path)
#for i in range(len(alpha_list)):
#    print(float(alpha_list[i]), occ_scf[0, i])
path = "nscf_bare" 
occ_nscf = get_U_array(nsite, alpha_list[1:], path)
                        
U = []
for isite in range(nsite):
    kai = linreg(list(map(float, alpha_list)), occ_scf[isite])[0]
    kai0 = linreg(list(map(float, alpha_list[1:])), occ_nscf[isite])[0]
    U.append(1/kai0 - 1/kai)
    #print(kai0, kai)
print(np.average(U))



